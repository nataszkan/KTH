{
  "swagger": "2.0",
  "info": {
    "title": "Node API",
    "description": "Template API project for Node.js",
    "version": "1.0.0"
  },
  "basePath": "/api/node",
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "paths": {
    "/_checkAPIkey": {
      "get": {
        "tags": ["system"],
        "operationId": "checkAPIkey",
        "summary": "Test authentication setup",
        "description": "Secured test endpoint which can be used to validate that a client has a working authentication setup\n\n_(System.checkAPIKey)_",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The given authentication is **accepted**"
          },
          "401": {
            "description": "This endpoint is secured - **credentials are missing or invalid**."
          },
          "default": {
            "description": "Unexpected response - internal error"
          }
        },
        "security": [
          {
            "api_key": ["read"]
          }
        ]
      }
    },
    "/v1/person/{id}": {
      "get": {
        "tags": ["person"],
        "operationId": "getPersonById",
        "summary": "Person with ID",
        "description": "Returns the person-object with the given ID.\n\n_(Sample.getPerson)_\n\n",
        "parameters": [
          {
            "$ref": "#/parameters/PersonId"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested person",
            "schema": {
              "$ref": "#/definitions/PersonObject"
            }
          },
          "401": {
            "description": "This endpoint is secured - **credentials are missing or invalid**."
          },
          "404": {
            "description": "No person found for given ID",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Document not found"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected response - internal error"
          }
        },
        "security": [
          {
            "api_key": ["read"]
          }
        ]
      },
      "post": {
        "tags": ["person"],
        "operationId": "postPersonById",
        "summary": "Store person data",
        "description": "Saves the given person-object, overwriting any old data with the same ID.\n\n_(Sample.postData)_",
        "parameters": [
          {
            "$ref": "#/parameters/PersonId"
          },
          {
            "$ref": "#/parameters/PersonObject"
          }
        ],
        "responses": {
          "200": {
            "description": "The stored person object",
            "schema": {
              "$ref": "#/definitions/PersonObject"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Sample validation failed: firstName: First name is required."
                }
              }
            }
          },
          "401": {
            "description": "This endpoint is secured - **credentials are missing or invalid**."
          },
          "default": {
            "description": "Unexpected response - internal error"
          }
        },
        "security": [
          {
            "api_key": ["write"]
          }
        ]
      },
      "put": {
        "tags": ["person"],
        "operationId": "getPersonById",
        "summary": "Update Person with ID",
        "description": "Updates the person-object with the given ID.\n\n_(Sample.getPerson)_\n\n",
        "parameters": [
          {
            "$ref": "#/parameters/PersonId"
          },
          {
            "$ref": "#/parameters/PersonObject"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested person",
            "schema": {
              "$ref": "#/definitions/PersonObject"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This endpoint is secured - **credentials are missing or invalid**."
          },
          "404": {
            "description": "No person found for the given ID",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected response - internal error"
          }
        },
        "security": [
          {
            "api_key": ["write"]
          }
        ]
      },
      "delete": {
        "tags": ["person"],
        "operationId": "deletePersonData",
        "summary": "Delete person data",
        "description": "Deletes the person object with the given ID.\n\n_(Sample.deletePerson)_",
        "parameters": [
          {
            "$ref": "#/parameters/PersonId"
          }
        ],
        "responses": {
          "204": {
            "description": "Person deleted successfully"
          },
          "401": {
            "description": "This endpoint is secured - **credentials are missing or invalid**."
          },
          "404": {
            "description": "No person found for the given ID",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "default": {
            "description": "Unexpected response - internal error"
          }
        },
        "security": [
          {
            "api_key": ["write"]
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "parameters": {
    "PersonId": {
      "in": "path",
      "description": "ID of person object, e.g. \"123\"",
      "name": "id",
      "required": true,
      "type": "string"
    },
    "PersonObject": {
      "in": "body",
      "description": "Person to save or update with given ID",
      "name": "person",
      "required": true,
      "schema": {
        "$ref": "#/definitions/PersonObject"
      }
    }
  },
  "definitions": {
    "PersonObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "123"
        },
        "firstName": {
          "type": "string",
          "example": "John"
        },
        "lastName": {
          "type": "string",
          "example": "Doe"
        }
      },
      "required": ["id", "firstName", "lastName"]
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Person not found"
        }
      }
    }
  }
}
